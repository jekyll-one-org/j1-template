---
regenerate:                             true
exclude_from_search:                    true
---

{%- capture cache %}

{% comment %}
 # -----------------------------------------------------------------------------
 # ~/assets/data/particles.json
 # Liquid JSON template for ALL Particles configured
 #
 # Product/Info:
 # http://jekyll.one
 #
 # Copyright (C) 2023-2025 Juergen Adams
 #
 # J1 Template is licensed under the MIT License.
 # See: https://github.com/jekyll-one-org/j1-template/blob/main/LICENSE
 # -----------------------------------------------------------------------------
 # The Liquid template galleries.json is used by J1 Justified Gallery.
 # This template is a helper that creates the gallery (JSON) data
 # for all galleries configured (if enabled or NOT). It's used by
 # the J1 Theme Adapter to LOAD the gallery HTML markup portion
 # via AJAX get.
 #
 # The Liquid template engine generates a JSON file as an object of
 # arrays that contains all image data used by several sliders. See
 # below the fields taken from the YAML data file:
 # ~/_data/modules/j1_justified_gallery.yml.
 # -----------------------------------------------------------------------------
 # NOTE:
 # Be careful changing the Liquid code. If the code is changed, check
 # the integrity of the JSON data created. Corrupted JSON data makes
 # the Javascript of an Adapter to fail and no functionality will
 # be available for most UNCLEAR reasons.
 # -----------------------------------------------------------------------------
 # Test data:
 #  {{ liquid_var | debug }}
 # -----------------------------------------------------------------------------
{% endcomment %}

{% comment %} Process YML config data
================================================================================ {% endcomment %}

{% comment %} Set config files
-------------------------------------------------------------------------------- {% endcomment %}
{% assign modules                = site.data.modules %}

{% comment %} Set config data
-------------------------------------------------------------------------------- {% endcomment %}
{% assign environment            = site.environment %}

{% assign particles_defaults     = modules.defaults.particles.defaults %}
{% assign particles_settings     = modules.particles.settings %}
{% assign particles_default_data = modules.defaults.particles.defaults.particle_data %}

{% comment %} Set config options
-------------------------------------------------------------------------------- {% endcomment %}
{% assign particles_config       = particles_defaults | merge: particles_settings %}

{% comment %} Detect prod mode
-------------------------------------------------------------------------------- {% endcomment %}
{% assign production = false %}
{% if environment == 'prod' or environment == 'production' %}
  {% assign production = true %}
{% endif %}


{% comment %} Main
particles_data.particles.number.value: {{ particles_data.particles.number.value }}
================================================================================ {% endcomment %}

{% for item in particles_settings.particles %}
{% assign particles_settings_data = item.particle.particle_data %}
{% assign particles_data          = particles_default_data | merge: particles_settings_data %}

"{{item.particle.id}}": [
  {
    "particles": {
      "number": {
        "value": {{particles_data.particles.number.value}},
        "density": {
          "enable": {{particles_data.particles.number.density.enable}},
          "value_area": {{particles_data.particles.number.density.value_area}}
        }
      },
      "color": {
        "value": "{{particles_data.particles.color.value}}"
      },
      "shape": {
        "type": "{{particles_data.particles.shape.type}}",
        "stroke": {
          "width": {{particles_data.particles.shape.stroke.width}},
          "color": "{{particles_data.particles.shape.stroke.color}}"
        },
        "polygon": {
          "nb_sides": {{particles_data.particles.shape.polygon.nb_sides}}
        },
        "image": {
          "src": "{{particles_data.particles.shape.image.src}}",
          "width": {{particles_data.particles.shape.image.width}},
          "height": {{particles_data.particles.shape.image.height}}
        }
      },
      "opacity": {
        "value": {{particles_data.particles.opacity.value}},
        "random": {{particles_data.particles.opacity.random}},
        "anim": {
          "enable": {{particles_data.particles.opacity.anim.enable}},
          "speed": {{particles_data.particles.opacity.anim.speed}},
          "opacity_min": {{particles_data.particles.opacity.anim.opacity_min}},
          "sync": {{particles_data.particles.opacity.anim.sync}}
        }
      },
      "size": {
        "value": {{particles_data.particles.size.value}},
        "random": {{particles_data.particles.size.random}},
        "anim": {
          "enable": {{particles_data.particles.size.anim.enable}},
          "speed": {{particles_data.particles.size.anim.speed}},
          "size_min": {{particles_data.particles.size.anim.size_min}},
          "sync": {{particles_data.particles.size.anim.sync}}
        }
      },
      "line_linked": {
        "enable": {{particles_data.particles.line_linked.enable}},
        "distance": {{particles_data.particles.line_linked.distance}},
        "color": "{{particles_data.particles.line_linked.color}}",
        "opacity": {{particles_data.particles.line_linked.opacity}},
        "width": {{particles_data.particles.line_linked.width}}
      },
      "move": {
        "enable": {{particles_data.particles.move.enable}},
        "speed": {{particles_data.particles.move.speed}},
        "direction": "{{particles_data.particles.move.direction}}",
        "random": {{particles_data.particles.move.random}},
        "straight": {{particles_data.particles.move.straight}},
        "out_mode": "{{particles_data.particles.move.out_mode}}",
        "bounce": {{particles_data.particles.move.bounce}},
        "attract": {
          "enable": {{particles_data.particles.move.attract.enable}},
          "rotateX": {{particles_data.particles.move.attract.rotateX}},
          "rotateY": {{particles_data.particles.move.attract.rotateY}}
        }
      }
    },
    "interactivity": {
      "detect_on": "{{particles_data.interactivity.detect_on}}",
      "events": {
        "onhover": {
          "enable": {{particles_data.interactivity.events.onhover.enable}},
          "mode": "{{particles_data.interactivity.events.onhover.mode}}"
        },
        "onclick": {
          "enable": {{particles_data.interactivity.events.onclick.enable}},
          "mode": "{{particles_data.interactivity.events.onclick.mode}}"
        },
        "resize": {{particles_data.interactivity.events.resize}}
      },
      "modes": {
        "grab": {
          "distance": {{particles_data.interactivity.modes.grab.distance}},
          "line_linked": {
            "opacity": {{particles_data.interactivity.modes.grab.line_linked.opacity}}
          }
        },
        "bubble": {
          "distance": {{particles_data.interactivity.modes.bubble.distance}},
          "size": {{particles_data.interactivity.modes.bubble.size}},
          "duration": {{particles_data.interactivity.modes.bubble.duration}},
          "opacity": {{particles_data.interactivity.modes.bubble.opacity}},
          "speed": {{particles_data.interactivity.modes.bubble.speed}}
        },
        "repulse": {
          "distance": {{particles_data.interactivity.modes.repulse.distance}},
          "duration": {{particles_data.interactivity.modes.repulse.duration}}
        },
        "push": {
          "particles_nb": {{particles_data.interactivity.modes.push.particles_nb}}
        },
        "remove": {
          "particles_nb": {{particles_data.interactivity.modes.remove.particles_nb}}
        }
      }
    },
    "retina_detect": {{particles_data.retina_detect}}
  }
]
{% endfor %}

{% endcapture -%}
{{ cache | strip_empty_lines }}
{% assign cache = false%}
