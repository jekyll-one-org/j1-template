Events
--------------------------------------------------------------------------------
See: https://developer.mozilla.org/en-US/docs/Web/API/Event

The Event interface represents an event which takes place on an EventTarget.
An event can be triggered by the user action e.g. clicking the mouse button
or tapping keyboard, or generated by APIs to represent the progress of an
asynchronous task. It can also be triggered programmatically, such as by
calling the HTMLElement.click() method of an element, or by defining the event,
then sending it to a specified target using EventTarget.dispatchEvent().

There are many types of events, some of which use other interfaces based on
the main Event interface. Event itself contains the properties and methods
which are common to all events.

Many DOM elements can be set up to accept (or "listen" for) these events,
and execute code in response to process (or "handle") them. Event-handlers
are usually connected (or "attached") to various HTML elements
(such as <button>, <div>, <span>, etc.) using EventTarget.addEventListener(),
and this generally replaces using the old HTML event handler attributes.

Further, when properly added, such handlers can also be disconnected if needed
using removeEventListener().


stopPropagation() method
------------------------
See: https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation

The stopPropagation() method of the Event interface prevents further
propagation of the current event in the capturing and bubbling phases.
It does not, however, prevent any default behaviors from occurring;
for instance, clicks on links are still processed. If you want to stop
those behaviors, see the preventDefault() method. It also does not prevent
propagation to other event-handlers of the current element.

If you want to stop those, see stopImmediatePropagation().

js
event.stopPropagation()


preventDefault() method
-----------------------
See: https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault

The preventDefault() method of the Event interface tells the user agent that
if the event does not get explicitly handled, its default action should not
be taken as it normally would be.

The event continues to propagate as usual, unless one of its event listeners
calls stopPropagation() or stopImmediatePropagation(), either of which
terminates propagation at once.

As noted below, calling preventDefault() for a non-cancelable event, such as
one dispatched via EventTarget.dispatchEvent(), without specifying
cancelable: true has no effect.

If a passive listener calls preventDefault(), nothing will happen and a
console warning may be generated.

js
event.preventDefault()


stopImmediatePropagation() method
---------------------------------
See: https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation

The stopImmediatePropagation() method of the Event interface prevents other
listeners of the same event from being called.

If several listeners are attached to the same element for the same event type,
they are called in the order in which they were added. If stopImmediatePropagation()
is invoked during one such call, no remaining listeners will be called, either
on that element or any other element.

js
event.stopImmediatePropagation()